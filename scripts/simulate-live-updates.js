const axios = require('axios');

const BACKEND_URL = 'http://localhost:5000';
const SIMULATION_DURATION = 2 * 60 * 1000; // 2 minutes in milliseconds
const UPDATE_INTERVAL = 1000; // Update every 1 second (faster updates!)

// Function to generate apartments for simulation based on real Vinhomes Duong Kinh data
function generateApartments(count = 200) {
  // Real Vinhomes Duong Kinh zones and apartment codes
  const zones = ['Thi√™n H√†', '√Ånh Sao'];
  const apartmentCodes = [
    // Thi√™n H√† zone codes from real data
    'ST-118', 'ST-3X', 'ST-7X', 'TH15B-17', 'TH15B-19', 'TH17-27', 'TH17-31', 'TH17-47',
    'TH2-06', 'TH2-08', 'TH2-1X', 'TH2-2X', 'TH2-3X', 'TH2-4X', 'TH2-54', 'TH2-58',
    'TH2-5X', 'TH2-66', 'TH2-6X', 'TH3-10X', 'TH5-0X', 'TH5-70', 'TH5-74', 'TH5A-08',
    'TH5A-14', 'TH5A-22', 'TH5A-40', 'TH6-09', 'TH6-11', 'TH6-138', 'TH6-148', 'TH6-54',
    'TH6-7X', 'TH8-106', 'TH8-126', 'TH8-145', 'TH8-1X', 'TH8-23', 'TH8-2X', 'TH8-4X',
    'TH8-50', 'TH8-54', 'TH8-73', 'TH8-89', 'TH8-8X', 'TH8-8Y', 'TH8-91', 'TH8-92',
    'TH8A-151', 'TH8A-153', 'TH8A-166', 'TH8A-182', 'TH8A-19', 'TH8A-194', 'TH8A-196',
    'TH8A-210', 'TH8A-216', 'TH8A-43', 'TH8A-55', 'TH8A-9X', 'TH8A-218', 'TH8-82',
    'TH8-151', 'TH2-74', 'ƒêLHH-77', 'TH8-94', 'TH5-46', 'TD-03', 'TH6-103', 'TH6-116',
    'ƒêLHH-09', 'ƒêLHH-27', 'TH2-46',
    // √Ånh Sao zone codes
    'AS10-109', 'AS10-20', 'ƒêLHH-98', 'AS8A-48'
  ];
  
  const propertyTypes = ['Shophouse', 'Song L·∫≠p', 'Li·ªÅn k·ªÅ', 'ƒê∆°n l·∫≠p'];
  const constructionStatus = [
    'Th√¥', 'X√¢y sau 1.5 nƒÉm', 'X√¢y sau 18T', 'X√¢y sau 2 nƒÉm', 'X√¢y sau 18 th√°ng'
  ];
  
  const agencies = [
    'ELITE CAPITAL', 'TPLAND', 'Vinsland', 'CELLA', 'Vietstarland', 'VHS',
    'T√¢n Th·ªùi ƒê·∫°i', 'Tr∆∞·ªùng Ph√°t Land', 'Thi√™n Ph√∫c Group', 'Th√†nh Ph√°t Land',
    'T√¢n Long', 'T√¢n H∆∞∆°ng Ph√°t', 'Southern Homes', 'Real Homes', 'QueenLand Group',
    'QTC', 'Ph√∫c L·ªôc', 'Ph√∫ Gia Land', 'NOVASKY', 'Newway Realty',
    'New Star Land', 'MICC Group', 'MGVN', 'MD Land', 'Mayhomes',
    'Joy Homes', 'Home Plus', 'HD Homes', 'GALAXY', 'Future Homes',
    'Five Star', 'Eternity Group', 'ƒê√¥ng T√¢y Land', 'ƒê√¥ng ƒê√¥ Land', 'ƒê·∫•t Vi·ªát',
    'BigHomes Group', 'ATD Homes', 'An Holding', 'AHS', 'One Housing'
  ];
  
  const statuses = ['S·∫µn s√†ng', 'ƒêang lock', 'ƒê√£ b√°n'];
  const apartments = [];
  const usedIds = new Set();
  
  for (let i = 0; i < count; i++) {
    let apartmentId;
    let attempts = 0;
    
    // Use real apartment codes first, then generate similar ones
    if (i < apartmentCodes.length) {
      apartmentId = apartmentCodes[i];
    } else {
      // Generate similar codes based on patterns
      do {
        const zone = zones[Math.floor(Math.random() * zones.length)];
        const baseCode = apartmentCodes[Math.floor(Math.random() * apartmentCodes.length)];
        const randomNum = Math.floor(Math.random() * 999) + 1;
        apartmentId = baseCode.replace(/\d+/g, String(randomNum).padStart(2, '0'));
        attempts++;
      } while (usedIds.has(apartmentId) && attempts < 100);
      
      if (attempts >= 100) {
        apartmentId = `VH${String(i + 1).padStart(3, '0')}`;
      }
    }
    
    usedIds.add(apartmentId);
    
    // Generate realistic area and price based on real Vinhomes data
    const propertyType = propertyTypes[Math.floor(Math.random() * propertyTypes.length)];
    const constructionType = constructionStatus[Math.floor(Math.random() * constructionStatus.length)];
    
    // Real area ranges from Vinhomes data
    let area;
    let basePrice;
    
    if (propertyType === 'Shophouse') {
      area = Math.round((Math.random() * 95 + 75) * 10) / 10; // 75-170 m¬≤
      basePrice = Math.random() * 15 + 8; // 8-23 t·ª∑
    } else if (propertyType === 'ƒê∆°n l·∫≠p') {
      area = Math.round((Math.random() * 83 + 247) * 10) / 10; // 247-330 m¬≤
      basePrice = Math.random() * 20 + 20; // 20-40 t·ª∑
    } else if (propertyType === 'Song L·∫≠p') {
      area = Math.round((Math.random() * 68 + 162) * 10) / 10; // 162-230 m¬≤
      basePrice = Math.random() * 10 + 14; // 14-24 t·ª∑
    } else { // Li·ªÅn k·ªÅ
      area = Math.round((Math.random() * 55 + 65) * 10) / 10; // 65-120 m¬≤
      basePrice = Math.random() * 4 + 6; // 6-10 t·ª∑
    }
    
    // Add construction status premium
    if (constructionType.includes('X√¢y sau')) {
      basePrice *= 0.85; // Slight discount for future construction
    }
    
    const price = Math.round(basePrice * 100) / 100;
    const agency = agencies[Math.floor(Math.random() * agencies.length)];
    const agencyShort = getAgencyShortName(agency);
    const zone = i < 70 ? 'Thi√™n H√†' : '√Ånh Sao'; // Most properties in Thi√™n H√†
    
    // Status distribution: 60% available, 25% locked, 15% sold
    let status;
    const statusRand = Math.random();
    if (statusRand < 0.6) status = 'S·∫µn s√†ng';
    else if (statusRand < 0.85) status = 'ƒêang lock';
    else status = 'ƒê√£ b√°n';
    
    apartments.push({
      id: apartmentId,
      zone: zone,
      propertyType: propertyType,
      constructionStatus: constructionType,
      agency: agency,
      agency_short: agencyShort,
      area: area,
      price: price,
      status: status
    });
  }
  
  return apartments;
}

// Generate 200 apartments for simulation
const apartments = generateApartments(200);

// Status transition rules: Available ‚Üí Lock ‚Üí (Sold or Available), Sold = final
function getNextStatus(currentStatus) {
  if (currentStatus === 'ƒê√£ b√°n') {
    // Sold is final state - no changes
    return currentStatus;
  } else if (currentStatus === 'S·∫µn s√†ng') {
    // Available can only go to Lock
    return Math.random() < 0.7 ? 'ƒêang lock' : 'S·∫µn s√†ng'; // 70% chance to lock
  } else if (currentStatus === 'ƒêang lock') {
    // Lock can go to Sold or back to Available
    const rand = Math.random();
    if (rand < 0.4) return 'ƒê√£ b√°n';     // 40% chance to sell
    else if (rand < 0.7) return 'S·∫µn s√†ng'; // 30% chance back to available
    else return 'ƒêang lock';              // 30% chance stay locked
  }
  return currentStatus;
}

// Agency updates to simulate changes
const agencyUpdates = [
  'UPDATED - New Contact',
  'VIP Customer Service',
  'Premium Service',
  'EXCLUSIVE DEAL',
  'üî• HOT PROPERTY',
  'LIMITED TIME OFFER',
  'PRICE REDUCED',
  'NEW LISTING',
  'JUST UPDATED',
  'FEATURED PROPERTY'
];

let updateCount = 0;
let startTime = Date.now();

console.log('üé¨ Starting Live Simulation - Real-Time Apartment Dashboard');
console.log('='.repeat(60));
console.log(`‚è±Ô∏è  Duration: 2 minutes`);
console.log(`üîÑ Update interval: ${UPDATE_INTERVAL/1000} seconds`);
console.log(`üè¢ Apartments: ${apartments.length} properties`);
console.log('='.repeat(60));
console.log('üì± Open http://localhost:3000 to watch the live updates!');
console.log('='.repeat(60));

async function checkBackend() {
  try {
    await axios.get(`${BACKEND_URL}/api/health`);
    return true;
  } catch (error) {
    return false;
  }
}

function getRandomElement(array) {
  return array[Math.floor(Math.random() * array.length)];
}

function formatTime(ms) {
  const seconds = Math.floor(ms / 1000);
  const minutes = Math.floor(seconds / 60);
  const remainingSeconds = seconds % 60;
  return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;
}

async function simulateUpdate() {
  const currentTime = Date.now();
  const elapsed = currentTime - startTime;
  
  if (elapsed >= SIMULATION_DURATION) {
    console.log('\nüéâ Simulation Complete!');
    console.log(`üìä Total updates sent: ${updateCount}`);
    console.log('‚ú® Check your dashboard for the final state');
    process.exit(0);
  }
  
  try {
    // Filter apartments that can still change (not sold)
    const availableApartments = apartments.filter(apt => apt.status !== 'ƒê√£ b√°n');
    
    if (availableApartments.length === 0) {
      console.log('\nüèÜ All apartments are sold! Ending simulation...');
      process.exit(0);
    }
    
    // Pick a random apartment to update (only from non-sold ones)
    const apartment = getRandomElement(availableApartments);
    const newStatus = getNextStatus(apartment.status);
    
    // Update the apartment's status in our local array
    apartment.status = newStatus;
    
    // Sometimes update the agency name to show visual changes
    let agency = apartment.agency;
    if (Math.random() < 0.3) { // 30% chance to update agency
      const update = getRandomElement(agencyUpdates);
      agency = `${apartment.agency} - ${update}`;
    }
    
    // Sometimes slightly adjust price (¬±0.1-0.3 billion)
    let price = apartment.price;
    if (Math.random() < 0.2) { // 20% chance to adjust price
      const adjustment = (Math.random() - 0.5) * 0.6; // -0.3 to +0.3
      price = Math.max(1.0, apartment.price + adjustment);
      price = Math.round(price * 10) / 10; // Round to 1 decimal
      apartment.price = price; // Update local price too
    }
    
    const updateData = {
      apartment_id: apartment.id,
      agency: agency,
      agency_short: apartment.agency_short,
      area: apartment.area,
      price: price,
      status: newStatus
    };
    
    const response = await axios.post(`${BACKEND_URL}/api/update-sheet`, updateData, {
      headers: { 
        'Content-Type': 'application/json; charset=utf-8',
        'Accept-Charset': 'utf-8'
      }
    });
    
    updateCount++;
    const remaining = formatTime(SIMULATION_DURATION - elapsed);
    const statusEmoji = newStatus === 'ƒê√£ b√°n' ? 'üî¥' : newStatus === 'ƒêang lock' ? 'üü°' : 'üü¢';
    const soldCount = apartments.filter(apt => apt.status === 'ƒê√£ b√°n').length;
    
    console.log(`[${remaining}] ${statusEmoji} ${apartment.id} ‚Üí ${newStatus} | ${agency.substring(0, 25)}${agency.length > 25 ? '...' : ''} | ${price} t·ª∑ (${soldCount}/${apartments.length} sold)`);
    
  } catch (error) {
    console.log(`‚ùå Update failed: ${error.message}`);
  }
}

// Function to generate agency short names
function getAgencyShortName(agencyName) {
  const shortNameMap = {
    'ELITE CAPITAL': 'ELITE',
    'TPLAND': 'TPL',
    'Vinsland': 'VIN',
    'CELLA': 'CEL',
    'Vietstarland': 'VSL',
    'VHS': 'VHS',
    'T√¢n Th·ªùi ƒê·∫°i': 'TTƒê',
    'Tr∆∞·ªùng Ph√°t Land': 'TPL',
    'Thi√™n Ph√∫c Group': 'TPG',
    'Th√†nh Ph√°t Land': 'T·∏æL',
    'T√¢n Long': 'TL',
    'T√¢n H∆∞∆°ng Ph√°t': 'THP',
    'Southern Homes': 'SH',
    'Real Homes': 'RH',
    'QueenLand Group': 'QLG',
    'QTC': 'QTC',
    'Ph√∫c L·ªôc': 'PL',
    'Ph√∫ Gia Land': 'PGL',
    'NOVASKY': 'NOV',
    'Newway Realty': 'NWR',
    'New Star Land': 'NSL',
    'MICC Group': 'MIC',
    'MGVN': 'MGV',
    'MD Land': 'MDL',
    'Mayhomes': 'MAY',
    'Joy Homes': 'JOY',
    'Home Plus': 'HP',
    'HD Homes': 'HDH',
    'GALAXY': 'GAL',
    'Future Homes': 'FH',
    'Five Star': 'FS',
    'Eternity Group': 'ETG',
    'ƒê√¥ng T√¢y Land': 'ƒêTL',
    'ƒê√¥ng ƒê√¥ Land': 'ƒêƒêL',
    'ƒê·∫•t Vi·ªát': 'ƒêV',
    'BigHomes Group': 'BHG',
    'ATD Homes': 'ATD',
    'An Holding': 'AH',
    'AHS': 'AHS',
    'One Housing': 'OH'
  };
  
  return shortNameMap[agencyName] || agencyName.substring(0, 3).toUpperCase();
}

function generateSampleApartments(count = 150) {
  const sampleAgencies = [
    'ELITE CAPITAL', 'TPLAND', 'Vinsland', 'CELLA', 'Vietstarland', 'VHS',
    'T√¢n Th·ªùi ƒê·∫°i', 'Tr∆∞·ªùng Ph√°t Land', 'Thi√™n Ph√∫c Group', 'Th√†nh Ph√°t Land',
    'T√¢n Long', 'T√¢n H∆∞∆°ng Ph√°t', 'Southern Homes', 'Real Homes', 'QueenLand Group',
    'QTC', 'Ph√∫c L·ªôc', 'Ph√∫ Gia Land', 'NOVASKY', 'Newway Realty',
    'New Star Land', 'MICC Group', 'MGVN', 'MD Land', 'Mayhomes',
    'Joy Homes', 'Home Plus', 'HD Homes', 'GALAXY', 'Future Homes',
    'Five Star', 'Eternity Group', 'ƒê√¥ng T√¢y Land', 'ƒê√¥ng ƒê√¥ Land', 'ƒê·∫•t Vi·ªát',
    'BigHomes Group', 'ATD Homes', 'An Holding', 'AHS', 'One Housing'
  ];
  
  return Array.from({ length: count }, (_, i) => {
    const agency = getRandomElement(sampleAgencies);
    const basePrice = Math.floor(Math.random() * 20 + 5) * 100000000; // 5-25 t·ª∑
    const price = Math.round(basePrice / 1000000) * 1000000; // Round to nearest million
    
    return {
      id: `APT-${i + 1}`,
      zone: i % 2 === 0 ? 'Thi√™n H√†' : '√Ånh Sao',
      propertyType: getRandomElement(['Shophouse', 'Song L·∫≠p', 'Li·ªÅn k·ªÅ', 'ƒê∆°n l·∫≠p']),
      constructionStatus: getRandomElement(['Th√¥', 'Ho√†n thi·ªán']),
      agency: agency,
      area: Math.floor(Math.random() * 100 + 50), // 50-150 m¬≤
      price: price,
      status: getRandomElement(['S·∫µn s√†ng', 'ƒêang lock', 'ƒê√£ b√°n'])
    };
  });
}

// Sample apartment data for initial load
const sampleApartments = generateSampleApartments(10);

// Initial agency short names generation
const agencyShortNames = Object.fromEntries(
  Object.keys(agencies).map(key => [key, getAgencyShortName(key)]))
;

// Log initial sample apartments and agency short names
console.log('üè† Sample Apartments:', JSON.stringify(sampleApartments, null, 2));
console.log('üè¢ Agency Short Names:', agencyShortNames);
