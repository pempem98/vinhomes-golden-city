# Multi-stage build for frontend
FROM node:18-alpine AS builder

# Set working directory
WORKDIR /app

# Copy package files first for better caching
COPY frontend/package*.json ./

# Install dependencies (node_modules will be ignored by .dockerignore)
RUN npm ci && npm cache clean --force

# Copy source code
COPY frontend ./

# Build the application
RUN npm run build

# Production stage with Nginx
FROM nginx:alpine AS production

# Install curl for health checks
RUN apk add --no-cache curl gettext

# Remove default nginx website
RUN rm -rf /usr/share/nginx/html/*

# Copy custom nginx configuration
COPY nginx.conf /etc/nginx/nginx.conf

# Copy built files from builder stage
COPY --from=builder /app/build /usr/share/nginx/html

# Create non-root user for better security
RUN addgroup -g 1001 -S nginx-user && \
    adduser -S nginx-user -u 1001 -G nginx-user

# Copy environment template if exists
COPY frontend/.env.production /usr/share/nginx/html/.env.production 2>/dev/null || echo "No .env.production found, skipping..."

# Create startup script for environment variables
RUN echo '#!/bin/sh' > /docker-entrypoint.d/40-generate-config.sh && \
    echo '[ -f /usr/share/nginx/html/.env.production ] && envsubst < /usr/share/nginx/html/.env.production > /usr/share/nginx/html/config.js || echo "No env file to process"' >> /docker-entrypoint.d/40-generate-config.sh && \
    chmod +x /docker-entrypoint.d/40-generate-config.sh

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:80/ || exit 1

# Expose port
EXPOSE 80

# Start Nginx
CMD ["nginx", "-g", "daemon off;"]
