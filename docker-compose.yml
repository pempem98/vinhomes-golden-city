services:
  # Database service (SQLite runs in backend, but we could extend to PostgreSQL)
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: vinhomes-golden-city-backend
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=6867
      - HMAC_SECRET=${HMAC_SECRET}
      - API_SECRET=${API_SECRET}
      - DATABASE_PATH=/app/database.sqlite
      - FRONTEND_URL=${FRONTEND_URL:-http://localhost:6868}
      - RATE_LIMIT_WINDOW_MS=${RATE_LIMIT_WINDOW_MS:-60000}
      - RATE_LIMIT_MAX_REQUESTS=${RATE_LIMIT_MAX_REQUESTS:-100}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      # CORS & IP Access Control
      - ALLOW_ALL_ORIGINS=${ALLOW_ALL_ORIGINS:-false}
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:6868}
      - ALLOW_ALL_IPS=${ALLOW_ALL_IPS:-false}
      - ALLOWED_IPS=${ALLOWED_IPS:-127.0.0.1,::1}
    volumes:
      - ./backend/database.sqlite:/app/database.sqlite
      - /app/node_modules
    ports:
      - "6867:6867"
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://127.0.0.1:6867/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - vinhomes-golden-city-network
    security_opt:
      - no-new-privileges:true
    tmpfs:
      - /tmp
      - /app/logs

  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: vinhomes-golden-city-frontend
    restart: unless-stopped
    environment:
      - REACT_APP_BACKEND_URL=${REACT_APP_BACKEND_URL:-http://localhost:6867}
      - REACT_APP_ENV=production
    ports:
      - "6868:80"
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:80/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - vinhomes-golden-city-network
    security_opt:
      - no-new-privileges:true

  # Optional: Add monitoring with Watchtower for auto-updates
  watchtower:
    image: containrrr/watchtower
    container_name: vinhomes-golden-city-watchtower
    restart: unless-stopped
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_POLL_INTERVAL=3600
      - WATCHTOWER_INCLUDE_STOPPED=true
      - WATCHTOWER_REVIVE_STOPPED=false
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - vinhomes-golden-city-network
    profiles:
      - monitoring

  # Optional: Add reverse proxy with SSL
  nginx-proxy:
    image: nginx:alpine
    container_name: vinhomes-golden-city-proxy
    restart: unless-stopped
    ports:
      - "8080:80"
    volumes:
      - ./nginx-proxy.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - frontend
      - backend
    networks:
      - vinhomes-golden-city-network
    profiles:
      - proxy

# No named volumes needed - using tmpfs for logs

networks:
  vinhomes-golden-city-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
